@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";



@import "base/animations";
@import "base/typography";
@import "base/utilities";
@import "base/base";


@import "components/button";
@import "components/composition";
@import "components/feature-box";
@import "components/card";
@import "components/story";
@import "components/bg-video";
@import "components/form";
@import "components/popup";

@import "layout/grid";
@import "layout/header";
@import "layout/footer";
@import "layout/navigation";

@import "pages/home";






/*How CSS Works: A Look Behind The Scenes*/


/*
 Three Pillars of Writing Good
HTML and CSS (Never Forget Them!)
1. Responsive Design
    - fluid layouts
    - Media Queries
    - Responsive  images
    - Correct units
    - Desktop first vs mobile-first

2. Maintainable and Scalable Code
    - Clean
    -Easy to understand
    - Growth
    - Reusable
    - How to organize files
    - How to name classes
    - How to structure HTML

3. Web Performance
    - Less HTTP requests
    - Less code
    - Compress code
    - Use a CSS preprocessor
    - Less images
    - Compress images


How CSS Works Behind the Scenes: An Overview
What happens to CSS when we load up a webpage?

1. Load HTML

2. Parse HTML:
    -Load CSS
        - Resolves conflictiong CSS declarations(Cascade)
        - Process final CSS values
    - CSS Object Model is formed(CSSOM)

3. Document Object Model is created

4. The render tree is created using the DOM and CSSOM

5. website rendering: the visual formatting model

6. Final rendered website.


How CSS is Parsed, Part 1: The Cascade and Specificity

CSS Rule - Consists of a selector and a declaration block. A declaration consists of property value and a property name.

Cascade - Process of combining different stylesheets and resolving conflicts between different CSS rules and declarations, when
more than one rule applies to a certain element. 

CSS styles come from different sources: The Author(developer), the user and the default browser styles(user agent).

The CSS resolvs conflicts by determining:
     1. the importance: 
        - User !important declarations
        - Author !important declarations
        - Author declarations: Usually the most common scenario is when author declarations are in conflict(same importance). That is where specifity comes in.
        - User declarations
        - Default browser declarations
     2. specificity:
        - inline styles
        - ID's
        - Classes, pseudo-classes, attributes.
        - Elements, pseudo elements
        If the elements have the same specifity the source order comes in.
     3. source order:
        - The last declaration in the code wll override all other declarations and will be applied.
    SUMMARY:
        - CSS declarations marked with !important have the highest priority.
        - But, only use !important as a last resource. It's better to use correct specificities - MORE MAINTAINABLE CODE
        - Inline styles will always have priority over styles in external stylesheets.
        - A selector that contains 1 ID is more specific than one with one 1000 classes.
        - A selector that contains 1 class is more specific than one with 1000 elements.
        - The universal selector (*) has no specificity value(0,0,0,0).
        - Rely more on specificity than on the order of selectors.
        - But, rely on order when using 3rd-party stylesheets - always put your author stylesheet last.

*/

/*SPECIFICITY IN PRACTICE*/

/*

How CSS is Parsed, Part 2: Value
Processing

How CSS values Are Processed:

1. Declared value(author declaration)

2. Cascaded value(after the cascade)

3. Specified value(defaulting, if there is no cascaded value)

4. Computed value(converting relative values to absolute)

5. Used values(final calculations, based on layout)

6. Actual value(browser and device restrictions)

How Units Are Converted From Relative To Absolute(px):

percentages(%):

  - fonts: % * parent's computed font size

  - lengths: % * parent's computed width

FONT-BASED:
em:
  - font:  em * PARENT computed font-size

  - lengths em * CURRENT ELEMENT computed font-size

  - rem: rem * root computed font-size

  em and rem are font-based but the difference is that em is based on the parent font size and rem is based on the root font size.

VIEWPORT-BASED:

vh: x * 1% of viewport height

vw: x * 1% of viewport width

SUMMARY:
Each property has an initial value, used if nothing is declared and there is no inheritance).
Browser's specify a root font-size for each page(usually 16px)
Percentages and relative values are always converted to pixels.
Percentages are measured relative to their parent's width, if used to specify lengths.
em are measured relative to their parent font size, if used to specify font-size.
em are measured relative to their current font size, if used to specify lengths.
rem are always measured relative to the document's root font-size.
vh and vw are simply percentage measurements of the viewport's height and width.



How CSS is Parsed, Part 3: Inheritance

SUMMARY: 
Inheritance passes the values for some specific properties  from parents to children - MORE MAINTANABLE CODE.
Properties related to text are inherited: font-family, font-size, color etc.
The computed value of a property is what gets inherited, NOT THE DECLARED VALUE.
Inheritance of a property only works if no one declares a value for that property.
The inherit keyword forces inheritance on a certain property.
The initial keyword resets a property to its initial value.

*/

/*
Converting px to rem: An Effective Workflow

How and why to use rem units in our project.
 1. Makes it easy to update all measurements on the page with one simple setting. 

A great workflow for converting px to rem.
 Assign font-size: 62.5%  to html and then use rem on everything
 rem does not work in old browsers.


 How CSS Renders a Website: The Visual Formatting Model

  = It is an algorithm that calculates boxes and determines the layout of these boxes, for each element in the render tree, in order to determine the final layout of the page.
  It takes into consideration:
    - Dimension of boxes: the box model(Watch these part again!!!)
        - Content: text, images etc.
        - Padding: transparent area around the content, inside of the box.
        -Border: goes around the padding and the content.
        -Margin: space between boxes.
        - Fill area: Area that gets filled with background color or background image.
   
    - Box type: inline, block and inline-block.
       - Block: 100% of the parent's width, Vertically one after another
       - inline: Occupies only content's space, No line breaks,  No heights and widths, Padding and margin only horizontal
       - inline-block: Occupies only content's space, no line breaks.
    - Positioning scheme: floats and positioning
        - Normal Flow
        - Float: Element is removed from the normal flow, Text and inline elements will wrap around floated element. The container will not adjust its height to the element.
        - Absolute positioning: Element is removed from normal flow , No impact on surrounding content or elements.
        - Stacking contexts: Order in which elements are rendered in the page.
    - Other elements in the render tree
    - viewport size, dimensions of images etc.




    CSS Architecture, Components and BEM

    The Think, Build, Architect mindset:
    1. Think: Think about the layout of your webpage or web app before writing code.
        - Component-driven design:
            - Modular building blocks that make up interfaces
            - Held together by the layout of the page.
            - Re-usable across a project, and between different projects.
            - Independant, allowing us to use them anywhere on the page.
    2. Build your layout in HTML and CSS with a consistent structure for naming classes.
            - Block Element Modifier(BEM)
            - Block: Standalone component that is meaningful on its own.
            - Element: part of a block that has no standalone meaning.
            - Modifier: A different version of a block or an element.
    3. Create a logical architecture for your CSS with files and folders.
            - 7-1 Pattern
            - 7 different folders for partial Sass files, and 1 main Sass file to import all other files into a compiled CSS stylesheet.
            - The folders are: base, components, layout, pages, themes, abstracts, vendors.



    Review: Basic Principles of Responsive Design and Layout Types

    1. Fluid Grids And Layouts:
        - Allow content to easily adapt to the current viewport width used to browse the website. Uses % rather than px for all layout-related lengths.
    2. Flexible/Responsive images:
        - Images behave differently than text content, and so we need to ensure that they also adapt nicely to the current viewport.
    3. Media Queries:
        - To change styles on certain viewport widths(breakpoints), allowing us to create different version of our website for different widths.

    Layout Types: Float layouts, flexbox and CSS grid.



    Building a Custom Grid with Floats
    How to architect and build a simple grid system
    How the attribute selector works
    How the :not pseudo-class works
    How calc() works, and what's the difference between calc() and simple Sass operations.
    

    Building the About Section - Part 1
    Think about components
    How and why to use utility classes
    How to use background-clip property
    How to transform multiple properties simultaneously
    How to style elements that are NOT hovered while others are.
    

    Building the Features Section
    How to include and use an icon font
        - https://linea.io/
        - Go to _basic folder --> _ICONFONT folder, copy styles.css and fonts folder, paste it in your project's css folder and link it in the html file.
    Another way of creating the "skewed section" design
    How and when to use the direct child selector
        - & > * {}
    

        Building the Tours Section - Part 1
        How to build an amaziong rotating card
        How to use perspective in CSS
            - Has to occur in the parent element of the one we are animating.
        How to use the backface-visibility property
        Using background blend modes
        How and when to use box-decoration-break


        FREE IMAGES: https://unsplash.com/
        
        Building the Stories Section - Part 1
        How to make text flow around shapes with shape-outside and float
        How to apply a filter to images
        How to create a background video covering an entire section
        How to use the <video> HTML element 
            - https://coverr.co/ - free videos
        How and when to use the object-fit property


        Building the Booking Section - Part 1

        How to implement "solid-color" gradients
        How the general and adjacent sibling selectors work and why we need them
        How to use ::input-placeholder pseudo-element
        How and when to use :focus, :invalid, placeholder-shown and : checked pseudo-classes.
        Techniques to build custom radio buttons.

         Building the Navigation - Part 1
         What the "checkbox hack" is and how it works
         How to create a custom animation timing functions using cubic bezier curves
            - https://easings.net/
            - https://cubic-bezier.com/#.17,.67,.83,.67
         How to animate "solid-color gradients
         How and why to use transform-origin
        

         Building a Pure CSS Popup:
         How to build a nice popup with only CSS
         How to use the :target pseudo-class
         How to create boxes with equal height using display: table-cell
         How to create CSS text columns
         How to automatically hyphenate words using hyphens.
            - Don't set vendor prefixes manually, instead use tools that automatically do that for you.
         

            Let's Use the Power of Sass Mixins to Write Media Queries
            How to use a powerful Sass mixing to write all our media queries
            How to use the @content and @if Sass directives
              - @content- allows css code to be passed to the mixin.
            Taking advantage of Chrome DevTools for responsive design
              - Shttps://sizzy.co/ - Test your website on different devices
           
            An Overview of Responsive Images
                - Goal: Serve right image at right screen size and device to avoid
                        downloading large images on smaller screens.
                - Techniques:
                    - Resolution switching
                    - Density switching(pixel density)
                    - Art direction

            Responsive Images in HTML - Art Direction and Density Switching
                - How to use the srcset attribute on the <im> and <source> elements, together with density descriptors;
                - How and why to use the <picture> element for art direction.
                - How to write media queries in HTML


                Responsive Images in HTML - Density and Resolution Switching
                    - How to allow the browser to decide the best image to download, 
                    using the srcset attribute width descriptors, and the sizes attribute 
                    <img> element.



                Responsive Images in CSS
                    - How to implement responsive images in CSS
                    - How to use resolution media queries to target high-resolution screeens with 2x.
                    - How to combine multiple conditions in media queries.


                Testing for Browser Support with @supports
                    - Always check caniuse.com before using a modern css property in production
                    - Graceful degradation with @supports

                
                Setting up a Simple Build Process with NPM Scripts
                    - Simple build process: Compilation --> Concatenation --> prefixing --> compressing
                    - When you concatenate files there's only going to be one HTTP request(performance)
        */